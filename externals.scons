import os,platform
Import('baseEnv')

####################################################################
# Basic data structure to represent the external libraries we need #
####################################################################
externalLibraries = {

  'CLHEP'   : {'version' : '1.9.2.2', 'includes' : ['CLHEP/config/CLHEP.h'], 'libraries' : {'clhepLibs'   : ['CLHEP']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include'), 'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib')},

  'fftw'    : {'version' : '3.1.2', 'includes' : ['fftw/fftw3.h'], 'libraries' : {'fftwLibs' : ['fftw3']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include'), 'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib')},

  'cfitsio' : {'version' : 'v3006', 'includes' : ['fitsio.h'], 'libraries' : {'cfitsioLibs' : ['cfitsio', 'm']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include'), 'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib')},

  'ape'     : {'version' : '2.3-gl1', 'includes' : ['ape/ape_list.h'], 'libraries' : {'apeLibs' : ['ape', 'readline', 'termcap']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include'), 'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib')},

  'ROOT'    : {'version' : 'v5.16.00-gl1', 'includes' : ['RVersion.h'], 'libraries' : {'rootLibs' : ['Tree', 'Net', 'Gpad', 'Graf', 'RIO', 'Hist', 'Physics', 'Matrix', 'Core', 'Cint', 'pthread', 'm', 'dl'],
                                                                                       'rootGuiLibs' : ['Rint', 'Postscript', 'TreePlayer', 'Tree', 'Net', 'Graf3d', 'Gui', 'HistPainter', 'Gpad'],
                                                                                       'minuitLibs'  : ['Minuit2', 'Graf', 'RIO', 'Hist', 'Matrix', 'Core', 'Cint']},
               'binaries' : ['rootcint'], 'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','root','include'), 
               'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','root','lib'), 'bin-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','root','bin')},

  'swig'    : {'version' : '1.3.31', 'binaries' : ['swig'], 'bin-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','bin'),
               'include-path' : os.path.join('$GLAST-EXT', '$NAME', '$VERSION', 'include')},

  'xerces'  : {'version' : '2.7.0', 'includes' : ['xercesc/util/XercesVersion.hpp'], 'libraries' : {'xercesLibs'  : ['xerces-c', 'pthread']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include'), 'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib')},

  'cppunit' : {'version' : '1.10.2', 'includes' : ['cppunit/ui/text/TextTestRunner.h'], 'libraries' : {'cppunitLibs' : ['cppunit', 'dl']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include'), 'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib')},

  'python'  : {'version' : '2.5.1', 'includes' : ['Python.h'], 'libraries' : {'pythonLibs'  : ['pthread', 'dl', 'util', 'm', 'python2.5']},
               'include-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','include', 'python2.5'),
               'lib-path' : os.path.join('$GLAST-EXT','$NAME','$VERSION','lib','python2.5','config')},

  'f2c'     : {'version' : '', 'libraries' : {'f2cLibs' : ['g2c']}}
}

##############################################################
# Override above default values for platform specific values #
##############################################################
if baseEnv['PLATFORM'] == "win32":
    externalLibraries['fftw']['libraries']['fftwLibs'] = ['libfftw3']
    externalLibraries['ape']['libraries']['apeLibs'] = ['apelib']
    externalLibraries['ROOT']['libraries']['rootLibs'] = ['libCore', 'libCint', 'libRIO', 'libNet', 'libTree', 'libHist', 'libGraf', 'libGpad', 'libMatrix', 'libPhysics']
    externalLibraries['ROOT']['libraries']['rootGuiLibs'] = ['libHist', 'libGraf', 'libGraf3d', 'libGpad', 'libRint', 'libPostscript', 'libTreePlayer', 'libGui', 'libHistPainter']
    externalLibraries['ROOT']['libraries']['minuitLibs'] = ['libMinuit2']
    externalLibraries['ROOT']['include-path'] = os.path.join('$GLAST-EXT', '$NAME', '$VERSION', 'vc8', 'include')
    externalLibraries['ROOT']['lib-path'] = os.path.join('$GLAST-EXT', '$NAME', '$VERSION', 'vc8', 'lib')
    externalLibraries['ROOT']['bin-path'] = os.path.join('$GLAST-EXT', '$NAME', '$VERSION', 'vc8', 'bin')
    externalLibraries['xerces']['libraries']['xercesLibs'] = ['xerces-c_2']
    externalLibraries['cppunit']['libraries']['cppunitLibs'] = ['CPPUNIT']
    externalLibraries['f2c']['libraries']['f2cLibs'] = ['libf77mt.lib', 'libi77mt.lib', 'oldnames.lib']
    externalLibraries['cfitsio']['libraries']['cfitsioLibs'] = ['cfitsio']
    externalLibraries['CLHEP']['lib-path']=os.path.join('$GLAST-EXT', '$NAME', '$VERSION', 'vcc-7.1')
    externalLibraries['python']['include-path']=os.path.join('$GLAST-EXT','$NAME','$VERSION','include')
    externalLibraries['python']['lib-path']  = os.path.join('$GLAST-EXT','$NAME','$VERSION','libs')
    externalLibraries['python']['libraries']['pythonLibs'] = ['python25']

#############################################################################
# Add SCons command line options to specify the location of these libraries #
# Modify build environment with the answers from those options              #
#############################################################################
AddOption('--with-GLAST-EXT', dest = 'GLAST-EXT', nargs=1, type='string', action='store', metavar='DIR', help='location of GLAST-EXT type directory layout for external libraries')

for lib in externalLibraries.keys():
    AddOption('--with-'+lib, dest = lib, nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' headers/libraries')
    if 'include-path' in externalLibraries[lib]:
        modified = False
        AddOption('--with-'+lib+'-includes', dest = lib+'-includes', nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' headers')
        if baseEnv.GetOption(lib):
            externalLibraries[lib]['include-path'] = os.path.join(baseEnv.GetOption(lib), 'include')
            modified = True
        else:
            if baseEnv.GetOption(lib+'-includes'):
                externalLibraries[lib]['include-path'] = baseEnv.GetOption(lib+'-includes')
                modified = True
            else:
                if baseEnv.GetOption('GLAST-EXT'):
                    externalLibraries[lib]['include-path'] = externalLibraries[lib]['include-path'].replace('$GLAST-EXT', baseEnv.GetOption('GLAST-EXT')).replace('$VERSION', externalLibraries[lib]['version']).replace('$NAME', lib)
                    modified = True
        if modified:
            baseEnv.AppendUnique(CPPPATH = [externalLibraries[lib]['include-path']])
    if 'lib-path' in externalLibraries[lib]:
        modified = False
        AddOption('--with-'+lib+'-libraries', dest = lib+'-libraries', nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' libraries')
        if baseEnv.GetOption(lib):
            externalLibraries[lib]['lib-path'] = os.path.join(baseEnv.GetOption(lib), 'lib')
            modified = True
      	else:
            if baseEnv.GetOption(lib+'-libraries'):
                externalLibraries[lib]['lib-path'] = baseEnv.GetOption(lib+'-libaries')
                modified = True
            else:
                if baseEnv.GetOption('GLAST-EXT'):
      	            externalLibraries[lib]['lib-path'] = externalLibraries[lib]['lib-path'].replace('$GLAST-EXT', baseEnv.GetOption('GLAST-EXT')).replace('$VERSION', externalLibraries[lib]['version']).replace('$NAME', lib)
                    modified = True
        if modified:
            baseEnv.AppendUnique(LIBPATH = [externalLibraries[lib]['lib-path']])
    if 'bin-path' in externalLibraries[lib]:
        modified = False
        AddOption('--with-'+lib+'-binaries', dest = lib+'-binaries', nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' binaries')
        if baseEnv.GetOption(lib):
            externalLibraries[lib]['bin-path'] = os.path.join(baseEnv.GetOption(lib), 'bin')
            modified = True
      	else:
      	    if baseEnv.GetOption(lib+'-binaries'):
                externalLibraries[lib]['bin-path'] = baseEnv.GetOption(lib+'-binaries')
                modified = True
      	    else:
      	        if baseEnv.GetOption('GLAST-EXT'):
      	            externalLibraries[lib]['bin-path'] = externalLibraries[lib]['bin-path'].replace('$GLAST-EXT', baseEnv.GetOption('GLAST-EXT')).replace('$VERSION', externalLibraries[lib]['version']).replace('$NAME', lib)
                    modified = True
        if modified:
            baseEnv.AppendUnique(PATH = [externalLibraries[lib]['bin-path']])

###############################################
# Print out External Library Summary if in RM #
###############################################
if baseEnv.GetOption('rm'):
    for lib in externalLibraries.keys():
        if 'lib-path' in externalLibraries[lib] and 'version' in externalLibraries[lib]:
            print 'RM EXT LIB: '+lib+' '+externalLibraries[lib]['version']+' '+externalLibraries[lib]['lib-path']

###########################################################
# Check to make sure external libraries and headers exist #
###########################################################
if not baseEnv.GetOption('help'):
    conf = baseEnv.Configure()
    for lib in externalLibraries.keys():
        if 'includes' in externalLibraries[lib] and 'include-path' in externalLibraries[lib]:
            for include in externalLibraries[lib]['includes']:
                if not conf.CheckCXXHeader(include):
                    Exit(1)
        if 'libraries' in externalLibraries[lib] and 'lib-path' in externalLibraries[lib]:
            for libGroup in externalLibraries[lib]['libraries'].keys():
                for library in reversed(externalLibraries[lib]['libraries'][libGroup]):
                    if not conf.CheckLib(library, language = 'C++'):
                        Exit(1)
        if 'libraries' in externalLibraries[lib]:
            for libGroup in externalLibraries[lib]['libraries'].keys():
                baseEnv[libGroup] = externalLibraries[lib]['libraries'][libGroup]
    conf.Finish()

############################
# Set up rootcint for ROOT #
############################

baseEnv.AppendENVPath('LD_LIBRARY_PATH', [externalLibraries['ROOT']['lib-path']])
baseEnv.AppendENVPath('ROOTSYS', [os.path.normpath(os.path.join(externalLibraries['ROOT']['include-path'], '..'))])
baseEnv.AppendENVPath('PATH', [externalLibraries['ROOT']['bin-path']])

def rootcintEmitter(target, source, env):
    target.append(str(target[0]).replace('.cxx','')+".h")
    return target, source

def rootcintGenerator(source,target,env,for_signature):
    buildlocation = Dir(str(target[0].dir)+'/..')
    root_headers = ''
    for header in env['includes']:
        root_headers += ' -I'+str(Dir(header))
    sources = ''
    for file in source:
        sources += ' '+str(buildlocation.rel_path(file))
    execute = 'cd '+os.path.join("${TARGET.dir}","..")+ ' && '
    execute += os.path.join(externalLibraries['ROOT']['bin-path'], 'rootcint') 
    execute += ' -f ' 
    execute += str(buildlocation.rel_path(target[0]))
    execute += ' -c'
    execute += root_headers 
    execute += sources 
    return execute

rootBuilder = Builder(generator = rootcintGenerator, emitter = rootcintEmitter, suffix = '.cxx')
baseEnv.Append(BUILDERS = { 'Rootcint' : rootBuilder })
if baseEnv['PLATFORM'] == "win32":
    def defGenerator(target, source, env, for_signature):
        return "/def:"+os.path.splitext(str(target[0]))[0]+".def"
    baseEnv['DEFGENERATOR'] = defGenerator
    baseEnv['SHLINKCOM'] = [os.path.join(externalLibraries['ROOT']['bin-path'], "bindexplib.exe") + " -o ${TARGET.base}.def ${TARGET.file} $SOURCES"] + baseEnv['SHLINKCOM']
    baseEnv['SHLINKCOM'].list[1].cmd_list = baseEnv['SHLINKCOM'].list[1].cmd_list.rstrip('" )}')
    baseEnv['SHLINKCOM'].list[1].cmd_list += " $DEFGENERATOR\")}"


##############
# Setup SWIG #
##############
baseEnv.PrependENVPath('PATH', [externalLibraries['swig']['bin-path']])
baseEnv.Tool('swig')
baseEnv.AppendUnique(SWIGPATH = [os.path.join(externalLibraries['swig']['include-path'], 'python'), externalLibraries['swig']['include-path'], baseEnv['INCDIR'], '.'])
baseEnv.AppendUnique(SWIGFLAGS = ['-w401', '-w402', '-w503', '-w362', '-w389', '-w509', '-python', '-c++'])
