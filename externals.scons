import os,platform
Import('baseEnv')
#########################
#    Helper Functions   #
#########################
def includePaths(library,version):
	if ARGUMENTS.get('with-'+library,'') =='':
		if ARGUMENTS.get('with-'+library+'-includes','') != '':
			return ARGUMENTS.get('with-'+library+'-includes','')
		else:
			if ARGUMENTS.get('with-GLAST-EXT','') != '':
				return os.path.join(ARGUMENTS.get('with-GLAST-EXT'),library,version,'include')
			else:
				return ''
	else:
		return os.path.join(ARGUMENTS.get('with-'+library,''),'include')

def libPaths(library,version):
	if ARGUMENTS.get('with-'+library,'') == '':
		if ARGUMENTS.get('with-'+library+'-libraries','') != '':
			return ARGUMENTS.get('with-'+library+'-libraries','')
		else:
			if ARGUMENTS.get('with-GLAST-EXT','') != '':
				return os.path.join(ARGUMENTS.get('with-GLAST-EXT'),library,version,'lib')
			else:
				return ''
	else:
		return os.path.join(ARGUMENTS.get('with-'+library,''),'lib')

def binPaths(library,version):
	if ARGUMENTS.get('with-'+library,'') == '':
		if ARGUMENTS.get('with-'+library+'-binaries','') != '':
			return ARGUMENTS.get('with-'+library+'-binaries','')
		else:
			if ARGUMENTS.get('with-GLAST-EXT','') != '':
				return os.path.join(ARGUMENTS.get('with-GLAST-EXT'),library,version,'bin')
			else:
				return ''
	else:
		return os.path.join(ARGUMENTS.get('with-'+library,''),'bin')

##########
#  CLHEP #
##########
if baseEnv['PLATFORM'] == "win32":
        clhepIncludePath = includePaths('CLHEP','1.9.2.2')
        clhepLibPath = os.path.join(libPaths('CLHEP',os.path.join('1.9.2.2','vcc-7.1')),'..')
else:
        clhepIncludePath = includePaths('CLHEP','1.9.2.2')
        clhepLibPath = libPaths('CLHEP','1.9.2.2')
baseEnv['clhepLibs']=Split('CLHEP')
if clhepLibPath != '':
	baseEnv.Append(LIBPATH = [clhepLibPath])
if clhepIncludePath != '':
	baseEnv.Append(CPPPATH = [clhepIncludePath])
helpString="""
	with-CLHEP:		Location of CLHEP headers/libraries.
	with-CLHEP-includes:	Location of CLHEP headers.
	with-CLHEP-libraries:	Location of CLHEP libraries.
"""

##########
#  FFTW  #
##########
fftwIncludePath = includePaths('fftw','3.1.2')
fftwLibPath = libPaths('fftw','3.1.2')
baseEnv['fftwLibs']=Split('fftw3')
if fftwLibPath != '':
	baseEnv.Append(LIBPATH = [fftwLibPath])
if fftwIncludePath != '':
	baseEnv.Append(CPPPATH = [fftwIncludePath])
helpString+="""
	with-fftw:		Location of FFTW headers/libraries.
	with-fftw-includes:	Location of FFTW headers.
	with-fftw-libraries:	Location of FFTW libraries.
"""

##########
#  FITS  #
##########
cfitsioIncludePath = includePaths('cfitsio','v3006')
cfitsioLibPath = libPaths('cfitsio','v3006')
baseEnv['cfitsioLibs']=Split('cfitsio')
if cfitsioLibPath != '':
	baseEnv.Append(LIBPATH = [cfitsioLibPath])
if cfitsioIncludePath != '':
	baseEnv.Append(CPPPATH = [cfitsioIncludePath])
helpString+="""
	with-cfitsio:		Location of FITS headers/libraries.
	with-cfitsio-includes:	Location of FITS headers.
	with-cfitsio-libraries:	Location of FITS libraries.
"""

##########
#  APE   #
##########
apeIncludePath = includePaths('ape','2.3-gl1')
apeLibPath = libPaths('ape','2.3-gl1')
baseEnv['apeLibs']=Split('ape termcap readline')
if apeLibPath != '':
	baseEnv.Append(LIBPATH = [apeLibPath])
if apeIncludePath != '':
	baseEnv.Append(CPPPATH = [apeIncludePath])
helpString+="""
	with-ape:		Location of APE headers/libraries.
	with-ape-includes	Location of APE headers.
	with-ape-libraries	Location of APE libraries.
"""

##########
#  ROOT  #
##########
if baseEnv['PLATFORM'] == "win32":
        rootIncludePath = includePaths('ROOT',os.path.join('v5.16.00-gl1','vc8'))
        rootLibPath = libPaths('ROOT',os.path.join('v5.16.00-gl1','vc8'))
        rootBinPath = binPaths('ROOT',os.path.join('v5.16.00-gl1','vc8'))
        baseEnv['rootLibs'] = Split('libCore libCint libRIO libNet libTree libHist libGraf libGpad libMatrix libPhysics')
        baseEnv['rootGuiLibs'] = Split('libHist libGraf libGraf3d libGpad libRint libPostscript libTreePlayer')
        baseEnv['minuitLibs'] = Split('libMinuit2')
else:
	rootIncludePath = includePaths('ROOT',os.path.join('v5.16.00-gl1','root'))
	rootLibPath = libPaths('ROOT',os.path.join('v5.16.00-gl1','root'))
	rootBinPath = binPaths('ROOT',os.path.join('v5.16.00-gl1','root'))
        baseEnv['rootLibs'] = Split('Core Cint RIO Net Tree Hist Graf Gpad Matrix Physics pthread m dl')
        baseEnv['rootGuiLibs'] = Split('Hist Graf Graf3d Gpad Rint Postscript TreePlayer')
        baseEnv['minuitLibs'] = Split('Minuit2')
baseEnv.AppendENVPath('LD_LIBRARY_PATH', rootLibPath)
baseEnv['ENV']['ROOTSYS']=[os.path.abspath(os.path.join(rootIncludePath,'..'))]
if rootLibPath != '':
	baseEnv.Append(LIBPATH = [rootLibPath])
if rootIncludePath != '':
	baseEnv.Append(CPPPATH = [rootIncludePath])
def rootcintEmitter(target, source, env):
           target.append(str(target[0]).replace('.cxx','')+".h")
           return target, source

def rootcintGenerator(source,target,env,for_signature):
	buildlocation = Dir(str(target[0].dir)+'/..')
        root_headers = ''
        for header in env['includes']:
		root_headers += ' -I'+str(Dir(header))
        sources = ''
        for file in source:
		sources += ' '+str(buildlocation.rel_path(file))
	execute = 'cd ${TARGET.dir}/.. ; '
	execute += os.path.join(rootBinPath, 'rootcint') 
	execute += ' -f ' 
	execute += str(buildlocation.rel_path(target[0]))
	execute += ' -c'
	execute += root_headers 
	execute += sources 
	return execute

rootBuilder = Builder(generator = rootcintGenerator, emitter = rootcintEmitter, suffix = '.cxx')
baseEnv.Append(BUILDERS = { 'Rootcint' : rootBuilder })
baseEnv.AppendENVPath('PATH', rootBinPath)
if baseEnv['PLATFORM'] == "win32":
	def defGenerator(target, source, env, for_signature):
		return "/def:"+os.path.splitext(str(target[0]))[0]+".def"
	baseEnv['DEFGENERATOR'] = defGenerator
	baseEnv['SHLINKCOM'] = [os.path.join(rootBinPath, "bindexplib.exe") + " -o ${TARGET.base}.def ${TARGET.file} $SOURCES"] + baseEnv['SHLINKCOM']
	baseEnv['SHLINKCOM'].list[1].cmd_list = baseEnv['SHLINKCOM'].list[1].cmd_list.rstrip('" )}')
	baseEnv['SHLINKCOM'].list[1].cmd_list += " $DEFGENERATOR\")}"

helpString+="""
	with-root:		Location of ROOT headers/libraries.
	with-root-includes	Location of ROOT headers.
	with-root-libraries	Location of ROOT libraries.
	with-root-binaries	Location of ROOT binaries.
"""

##########
#  SWIG  #
##########
swigBinPath = binPaths('swig','1.3.31')
swigIncludePath = includePaths('swig','1.3.31')
baseEnv['SWIG']=os.path.join(swigBinPath,'swig')
baseEnv.Append(SWIGPATH = [swigIncludePath, swigIncludePath+'/python', baseEnv['INCDIR'], '.'])
baseEnv.AppendUnique(SWIGFLAGS = ['-w401', '-w402', '-w503', '-w362', '-w389', '-w509', '-python', '-c++'])
helpString+="""
	with-swig		Location of SWIG headers/libraries.
	with-swig-includes	Location of SWIG headers
	with-swig-libraries	Location of SWIG libraries
"""

##########
# Xerces #
##########
xercesIncludePath = includePaths('xerces','2.7.0')
xercesLibPath = libPaths('xerces','2.7.0')
if baseEnv['PLATFORM'] == "win32":
	baseEnv['xercesLibs'] = Split('xerces-c_2')
else:
	baseEnv['xercesLibs'] = Split('xerces-c pthread')
if xercesLibPath != '':
	baseEnv.Append(LIBPATH = [xercesLibPath])
if xercesIncludePath != '':
	baseEnv.Append(CPPPATH = [xercesIncludePath])
helpString+="""
	with-xerces:		Location of Xerces headers/libraries.
	with-xerces-includes:	Location of Xerces headers.
	with-xerces-libraries:	Location of Xerces libraries.
"""

##########
# cppunit#
##########
cppunitIncludePath = includePaths('cppunit','1.10.2')
cppunitLibPath = libPaths('cppunit','1.10.2')
if baseEnv['PLATFORM'] == "win32":
	baseEnv['cppunitLibs'] = Split('CPPUNIT')
else:
	baseEnv['cppunitLibs'] = Split('cppunit dl')
if cppunitLibPath != '':
	baseEnv.Append(LIBPATH = [cppunitLibPath])
if cppunitIncludePath != '':
	baseEnv.Append(CPPPATH = [cppunitIncludePath])
helpString+="""
	with-cppunit:		Location of cppunit headers/libraries.
	with-cppunit-includes:	Location of cppunit headers.
	with-cppunit-libraries:	Location of cppunit libraries.
"""

##########
# Python #
##########
pythonBinPath = binPaths('python','2.5.1')
if baseEnv['PLATFORM'] == "win32":
	pythonIncludePath = includePaths('python','2.5.1')
	baseEnv['pythonLibs'] = Split(File(os.path.join(libPaths('python', '2.5.1')+'s','python25.lib')))
else:
	pythonIncludePath = includePaths('python','2.5.1')+'/python2.5'
	pythonLibPath = libPaths('python','2.5.1')+'/python2.5/config'
	baseEnv['pythonLibs'] = Split('pthread dl util m python2.5')
	if pythonLibPath != '':
        	baseEnv.Append(LIBPATH = [pythonLibPath])
#if pythonBinPath != '':
#	env = Environment()
#	env.ParseConfig(os.path.join(pythonBinPath,'python-config')+' --ldflags')
#	baseEnv['pythonLibs'] = env['LIBS']
#	pythonLibs = env['LIBS']
#	baseEnv.ParseConfig(os.path.join(pythonBinPath,'python-config')+' --includes')
#	baseEnv.Append(LIBPATH = env['LIBPATH'])
if pythonIncludePath != '':
        baseEnv.Append(CPPPATH = [pythonIncludePath])
helpString+="""
        with-python:		Location of python headers/libraries.
	with-python-includes:	Location of python headers.
	with-python-libraries:	Location of python libraries

	with-GLAST-EXT:        Location of all external libraries with GLAST_EXT layout.
"""

##########
#   F2C  #
##########
if baseEnv['PLATFORM'] == "win32":
	baseEnv['f2cLibs'] = Split('libf77mt.lib libi77mt.lib oldnames.lib')
else:
	baseEnv['f2cLibs'] = Split('g2c')

Return('helpString')
