# -*- python -*-
import os,platform
Import('baseEnv')

####################################################################
# Basic data structure to represent the external libraries we need #
####################################################################
externalLibraries = {
    
    'CLHEP'    : {'version' : '1.9.2.2',
                  'includes' : ['CLHEP/config/CLHEP.h'],
                  'libraries' : {'clhepLibs'   : ['CLHEP']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'include'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'lib'),
                  'ld-path' : '$LIB-PATH'},
    
    'fftw'     : {'version' : '3.1.2',
                  'includes' : ['fftw/fftw3.h'],
                  'libraries' : {'fftwLibs' : ['fftw3']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'include'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER','lib'),
                  'ld-path' : '$LIB-PATH'},

    'cfitsio'  : {'version' : 'v3060',
                  'includes' : ['fitsio.h'],
                  'libraries' : {'cfitsioLibs' : ['cfitsio', 'm']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER','include'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'lib'),
                  'ld-path' : '$LIB-PATH'},

    'ape'      : {'version' : '2.3-gl1',
                  'includes' : ['ape/ape_list.h'],
                  'libraries' : {'apeLibs' : ['ape', 'readline', 'termcap']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'include'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'lib'),
                  'ld-path' : '$LIB-PATH'},

    'ROOT'     : {'version' : 'v5.18.00c-gl1',
                  'includes' : ['RVersion.h'],
                  'libraries' : {'rootLibs' : ['Tree', 'Net', 'Gpad', 'Graf', 'RIO', 'Hist', 'Physics', 'Matrix', 'Core', 'Cint', 'pthread', 'm', 'dl'],
                                 'rootGuiLibs' : ['Rint', 'Postscript', 'TreePlayer', 'Tree', 'Net', 'Graf3d', 'Gui', 'HistPainter', 'Gpad'],
                                 'minuitLibs'  : ['Minuit2', 'Minuit', 'Graf', 'RIO', 'Hist', 'Matrix', 'Core', 'Cint']},
                  'binaries' : ['rootcint'], 'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER','include'), 
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER','lib'),
                  'bin-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'bin'),
                  'ld-path' : '$LIB-PATH'},

    'swig'     : {'version' : '1.3.31',
                  'binaries' : ['swig'],
                  'bin-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'bin'),
                  'include-path' : os.path.join('$GLAST_EXT', '$NAME', '$VERSION', '$COMPILER', 'include')},
    
    'xerces'   : {'version' : '2.7.0',
                  'includes' : ['xercesc/util/XercesVersion.hpp'],
                  'libraries' : {'xercesLibs'  : ['xerces-c', 'pthread']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'include'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'lib'),
                  'bin-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'bin'),
                  'ld-path' : '$LIB-PATH'},

    'cppunit'  : {'version' : '1.10.2',
                  'includes' : ['cppunit/ui/text/TextTestRunner.h'],
                  'libraries' : {'cppunitLibs' : ['cppunit', 'dl']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'include'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER','lib'),
                  'ld-path' : '$LIB-PATH'},

    'python'   : {'version' : '2.5.1',
                  'includes' : ['Python.h'],
                  'libraries' : {'pythonLibs'  : ['pthread', 'dl', 'util', 'm', 'python2.5']},
                  'include-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION', '$COMPILER', 'include', 'python2.5'),
                  'lib-path' : os.path.join('$GLAST_EXT','$NAME','$VERSION', '$COMPILER', 'lib','python2.5','config'),
                  'ld-path' : '$LIB-PATH'},

    'f2c'      : {'version' : '',
                  'libraries' : {'f2cLibs' : ['g2c']}},
    
    'extFiles' : {'version' : 'v0r7',
                  'cppdefines' : ['extFiles=$VERSION']}
}

##############################################################
# Override above default values for platform specific values #
##############################################################
if baseEnv['PLATFORM'] == "win32":
    externalLibraries['fftw']['libraries']['fftwLibs'] = ['libfftw3']

    externalLibraries['ape']['libraries']['apeLibs'] = ['apelib']

    externalLibraries['ROOT']['version'] = 'v5.18.00b'
    externalLibraries['ROOT']['libraries']['rootLibs'] = ['libCore', 'libCint', 'libRIO', 'libNet', 'libTree', 'libHist', 'libGraf', 'libGpad', 'libMatrix', 'libPhysics']
    externalLibraries['ROOT']['libraries']['rootGuiLibs'] = ['libHist', 'libGraf', 'libGraf3d', 'libGpad', 'libRint', 'libPostscript', 'libTreePlayer', 'libGui', 'libHistPainter']
    externalLibraries['ROOT']['libraries']['minuitLibs'] = ['libMinuit2']
    externalLibraries['ROOT']['ld-path'] = '$BIN-PATH'

    externalLibraries['xerces']['libraries']['xercesLibs'] = ['xerces-c_2']
    externalLibraries['xerces']['bin-path'] = os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'bin')
    externalLibraries['xerces']['ld-path'] = '$BIN-PATH'

    externalLibraries['cppunit']['libraries']['cppunitLibs'] = ['CPPUNIT']

    externalLibraries['f2c']['libraries']['f2cLibs'] = ['libf77mt.lib', 'libi77mt.lib', 'oldnames.lib']

    externalLibraries['cfitsio']['libraries']['cfitsioLibs'] = ['cfitsio']

    externalLibraries['python']['include-path']=os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'include')
    externalLibraries['python']['lib-path']  = os.path.join('$GLAST_EXT','$NAME','$VERSION','$COMPILER', 'libs')
    externalLibraries['python']['libraries']['pythonLibs'] = ['python25']

if baseEnv['PLATFORM'] == 'darwin':
    externalLibraries['python']['libraries']['pythonLibs'].remove('util')

############################################################################
# Set the correct compiler version, name, and library version in the paths #
############################################################################
if baseEnv['PLATFORM'] == "win32":
    compiler = 'vc'+''.join(baseEnv['MSVS']['VERSION'].split('.')[0:2])
else:
    compiler = 'gcc'+''.join(baseEnv['CXXVERSION'].split('.')[0:2])
for lib in externalLibraries.keys():
    for path in ['include-path', 'lib-path', 'bin-path']:
        if path in externalLibraries[lib]:
            externalLibraries[lib][path] = externalLibraries[lib][path].replace('$COMPILER', compiler)
            externalLibraries[lib][path] = externalLibraries[lib][path].replace('$VERSION', externalLibraries[lib]['version'])
            externalLibraries[lib][path] = externalLibraries[lib][path].replace('$NAME', lib)

############################################
# Add options to override paths if desired #
############################################
for lib in externalLibraries.keys():
    AddOption('--with-'+lib, dest = lib, nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' headers/libraries')
    if 'include-path' in externalLibraries[lib]:
        AddOption('--with-'+lib+'-includes', dest = lib+'-includes', nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' headers')
    if 'lib-path' in externalLibraries[lib]:
        AddOption('--with-'+lib+'-libraries', dest = lib+'-libraries', nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' libraries')
    if 'bin-path' in externalLibraries[lib]:
        AddOption('--with-'+lib+'-binaries', dest = lib+'-binaries', nargs=1, type='string', action='store', metavar='DIR', help='location of '+lib+' '+externalLibraries[lib]['version']+' binaries')

##########################
# Check Override Options #
##########################
for lib in externalLibraries.keys():
    if baseEnv.GetOption(lib):
        if 'include-path' in externalLibraries[lib]:
            externalLibraries[lib]['include-path'] = os.path.join(baseEnv.GetOption(lib), 'include')
        if 'lib-path' in externalLibraries[lib]:
            externalLibraries[lib]['lib-path'] = os.path.join(baseEnv.GetOption(lib), 'lib')
        if 'bin-path' in externalLibraries[lib]:
            externalLibraries[lib]['bin-path'] = os.path.join(baseEnv.GetOption(lib), 'bin')
    else:
        if 'include-path' in externalLibraries[lib]:
            if baseEnv.GetOption(lib+'-includes'):
                externalLibraries[lib]['include-path'] = baseEnv.GetOption(lib+'-includes')
        if 'lib-path' in externalLibraries[lib]:
            if baseEnv.GetOption(lib+'-libraries'):
                externalLibraries[lib]['lib-path'] = baseEnv.GetOption(lib+'-libraries')
        if 'bin-path'  in externalLibraries[lib]:
            if baseEnv.GetOption(lib+'-binaries'):
                externalLibraries[lib]['bin-path'] = baseEnv.GetOption(lib+'-binaries')

#################################################################
# Register all external libraries to be used in wrapper scripts #
#################################################################
for lib in externalLibraries.keys():
    if 'ld-path' in externalLibraries[lib] and 'version' in externalLibraries[lib]:
        if 'lib-path' in externalLibraries[lib]:
            externalLibraries[lib]['ld-path'] = externalLibraries[lib]['ld-path'].replace('$LIB-PATH', externalLibraries[lib]['lib-path'])
        if 'bin-path' in externalLibraries[lib]:
            externalLibraries[lib]['ld-path'] = externalLibraries[lib]['ld-path'].replace('$BIN-PATH', externalLibraries[lib]['bin-path'])
        baseEnv.AppendUnique(WRAPPERLIBS = [externalLibraries[lib]['ld-path']])
baseEnv['ROOTSYS'] = os.path.normpath(os.path.join(externalLibraries['ROOT']['include-path'], '..'))

########################################
# Set up GLAST-EXT if it was specified #
########################################
AddOption('--with-GLAST-EXT', dest = 'GLAST-EXT', nargs=1, type='string', action='store', metavar='DIR', help='location of GLAST_EXT type directory layout for external libraries')
if baseEnv.GetOption('GLAST-EXT'):
    for lib in externalLibraries.keys():
        for path in ['include-path', 'lib-path', 'bin-path']:
            if path in externalLibraries[lib]:
                externalLibraries[lib][path] = externalLibraries[lib][path].replace('$GLAST_EXT', baseEnv.GetOption('GLAST-EXT'))

######################################
# Add paths to the compile/link line #
######################################
for lib in externalLibraries.keys():
    if 'include-path' in externalLibraries[lib] and externalLibraries[lib]['include-path'].find('$') == -1:
        baseEnv.AppendUnique(CPPPATH = [externalLibraries[lib]['include-path']])
    if 'lib-path' in externalLibraries[lib] and externalLibraries[lib]['lib-path'].find('$') == -1:
        baseEnv.AppendUnique(LIBPATH = [externalLibraries[lib]['lib-path']])
    if 'bin-path' in externalLibraries[lib] and externalLibraries[lib]['bin-path'].find('$') == -1:
        baseEnv.AppendUnique(PATH = [externalLibraries[lib]['bin-path']])

###############################################
# Print out External Library Summary if in RM #
###############################################
if baseEnv.GetOption('rm'):
    print "scons: printing external libraries"
    for lib in externalLibraries.keys():
        if 'ld-path' in externalLibraries[lib] and 'version' in externalLibraries[lib]:
            if 'lib-path' in externalLibraries[lib]:
                externalLibraries[lib]['ld-path'] = externalLibraries[lib]['ld-path'].replace('$LIB-PATH', externalLibraries[lib]['lib-path'])
            if 'bin-path' in externalLibraries[lib]:
                externalLibraries[lib]['ld-path'] = externalLibraries[lib]['ld-path'].replace('$BIN-PATH', externalLibraries[lib]['bin-path'])
            print lib+' '+externalLibraries[lib]['version']+' '+externalLibraries[lib]['ld-path']
    print "scons: done printing external libraries"

###########################################################
# Register various compile options for external libraries #
###########################################################
for lib in externalLibraries.keys():
    if 'libraries' in externalLibraries[lib]:
        for libGroup in externalLibraries[lib]['libraries'].keys():
            baseEnv[libGroup] = externalLibraries[lib]['libraries'][libGroup]
    if 'cppdefines' in externalLibraries[lib]:
        for define in externalLibraries[lib]['cppdefines']:
            if baseEnv.GetOption('GLAST-EXT'):
                define = define.replace('$GLAST_EXT', baseEnv.GetOption('GLAST-EXT'))
            define = define.replace('$VERSION', externalLibraries[lib]['version']).replace('$NAME', lib)
            baseEnv.AppendUnique(CPPDEFINES = [define])

###########################################################
# Check to make sure external libraries and headers exist #
###########################################################
if not baseEnv.GetOption('help') and not baseEnv.GetOption('clean'):
    env = baseEnv.Clone()
    conf = env.Configure()
    for lib in externalLibraries.keys():
        if 'includes' in externalLibraries[lib] and 'include-path' in externalLibraries[lib]:
            for include in externalLibraries[lib]['includes']:
                if not conf.CheckCXXHeader(include):
                    print 'Unable to find a header file for '+lib+'. See config.log for more details.'
                    Exit(1)
        if 'libraries' in externalLibraries[lib] and 'lib-path' in externalLibraries[lib]:
            for libGroup in externalLibraries[lib]['libraries'].keys():
                for library in externalLibraries[lib]['libraries'][libGroup][::-1]:
                    if not conf.CheckLib(library, language = 'C++'):
                        print 'Unable to find a library for '+lib+'. See config.log for more details.'
                        Exit(1)
    conf.Finish()

############################
# Set up rootcint for ROOT #
############################

baseEnv.AppendENVPath('LD_LIBRARY_PATH', [externalLibraries['ROOT']['lib-path']])
if baseEnv["PLATFORM"] == 'darwin':
    baseEnv.AppendENVPath('DYLD_LIBRARY_PATH', [externalLibraries['ROOT']['lib-path']])
baseEnv.AppendENVPath('ROOTSYS', [os.path.normpath(os.path.join(externalLibraries['ROOT']['include-path'], '..'))])
baseEnv.AppendENVPath('PATH', [externalLibraries['ROOT']['bin-path']])

def rootcintEmitter(target, source, env):
    target.append(str(target[0]).replace('.cxx','')+".h")
    return target, source

def rootcintGenerator(source,target,env,for_signature):
    buildlocation = Dir(str(target[0].dir)+'/..')
    root_headers = ''
    for header in env['includes']:
        root_headers += ' -I'+str(Dir(header))
    sources = ''
    for file in source:
        sources += ' '+str(buildlocation.rel_path(file))
    execute = 'cd '+os.path.join("${TARGET.dir}","..")+ ' && '
    execute += os.path.join(externalLibraries['ROOT']['bin-path'], 'rootcint') 
    execute += ' -f ' 
    execute += str(buildlocation.rel_path(target[0]))
    execute += ' -c'
    execute += root_headers 
    execute += sources 
    return execute

rootBuilder = Builder(generator = rootcintGenerator, emitter = rootcintEmitter, suffix = '.cxx')
baseEnv.Append(BUILDERS = { 'Rootcint' : rootBuilder })
if baseEnv['PLATFORM'] == "win32":
    def defGenerator(target, source, env, for_signature):
        return "/def:"+os.path.splitext(str(target[0]))[0]+".def"
    baseEnv['DEFGENERATOR'] = defGenerator
    baseEnv['SHLINKCOM'] = [os.path.join(externalLibraries['ROOT']['bin-path'], "bindexplib.exe") + " -o ${TARGET.base}.def ${TARGET.file} $SOURCES"] + baseEnv['SHLINKCOM']
    baseEnv['SHLINKCOM'].list[1].cmd_list = baseEnv['SHLINKCOM'].list[1].cmd_list.rstrip('" )}')
    baseEnv['SHLINKCOM'].list[1].cmd_list += " $DEFGENERATOR\")}"


##############
# Setup SWIG #
##############
baseEnv.PrependENVPath('PATH', [externalLibraries['swig']['bin-path']])
baseEnv.Tool('swig')
baseEnv.AppendUnique(SWIGPATH = [baseEnv['CPPPATH'], os.path.join(externalLibraries['swig']['include-path'], 'python'), externalLibraries['swig']['include-path'], baseEnv['INCDIR'], '.'])
baseEnv.AppendUnique(SWIGFLAGS = ['-w401', '-w402', '-w503', '-w362', '-w389', '-w509', '-python', '-c++'])
