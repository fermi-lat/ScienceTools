name: CMake Build osx arm64
on:
  push:
    branches: [ 'addition_creator_fits' ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

jobs:
  docker:
    runs-on: macos-15 # Or macos-14, macos-13, macos-12 for specific versions
    defaults:
     run:
        shell: bash -el {0}
    steps:
    - name: checkout the code
      uses: actions/checkout@v4 # Checkout the repository code
      with:
        ref: addition_creator_fits
        submodules: 'recursive' # true
        fetch-depth: 0 # Fetches full history

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3

    - name: Verify proper  submodule branches were checked out
      run: |
       git submodule status --recursive | awk '{ print $2 }' | while read -r submodule_path; do
        echo "Submodule: $submodule_path"
        pushd "$submodule_path" > /dev/null

        # Get the currently checked out branch (if any)
        branch=$(git rev-parse --abbrev-ref HEAD)
        if [ "$branch" == "HEAD" ]; then
           # If HEAD is detached, get the commit SHA
           echo "  - Detached HEAD at commit: $(git rev-parse HEAD)"
        else
           echo "  - Branch: $branch"
           echo "  - Commit: $(git rev-parse HEAD)"
        fi
        popd > /dev/null
       done

    - name: Get miniforge
      uses: mamba-org/setup-micromamba@v2
      with:
        ## fermitools-develop-osx-arm64.yml fermitools-develop-osx-x86.yml
        environment-file: environments/fermitools-develop-osx-arm64.yml
        environment-name: fermi-dev
        ## init-shell: bash
        ## cache-environment: true
        ## post-cleanup: 'all'

    - name: Setup environment
      # Add steps to set up your build environment, e.g., install dependencies
      run: |
        # Example: Install Homebrew and a package
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        brew install cmake cmake-data curl
    

    - name: Configure CMake
      run: |
        echo "Current Git Ref: ${{ github.ref }}"
        cmake -S . -B RelWithDebInfo -DCMAKE_OSX_ARCHITECTURES="arm64" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_VERBOSE_MAKEFILE=ON  -DCMAKE_INSTALL_PREFIX="$CONDA_PREFIX" -DCMAKE_PREFIX_PATH="$CONDA_PREFIX"

    - name: Build Project
      run: |
        echo "Current Git Ref: ${{ github.ref }}"
        cmake --build RelWithDebInfo --target=install
